{"version":3,"sources":["../node_modules/@material-ui/icons/Edit.js","app/services/leadSource.service.js","app/pages/home/lead-source/components/LeadSourceInput.js","app/pages/home/lead-source/components/ViewLeadSource.js","app/pages/home/lead-source/LeadSource.js"],"names":["_interopRequireDefault","Object","defineProperty","exports","value","default","_react","_default","createElement","d","ROOT_URL","process","getLeadSourceList","axios","get","addLeadSource","data","post","updateLeadSource","patch","deleteLeadSource","id","delete","assignLeadSource","getLeadSourceUsers","LeadSourceInput","props","onSubmit","handleSubmit","Container","Row","Col","xs","InputGroup","className","TextField","onChange","handleChange","label","leadSourceName","variant","fullWidth","InputLabelProps","shrink","size","FormControlLabel","control","Checkbox","checked","active","handleChangeActive","color","Button","type","onClick","e","connect","state","businessId","auth","user","mainRole","userId","useState","setState","isModalOpen","setIsModalOpen","isModalAssignOpen","setIsModalAssignOpen","isUpdate","setIsUpdate","input","setInput","reRender","setRerender","businessUsers","setBusinessUsers","assignedUsers","setAssignedUsers","assignLeadId","setAssignedLeadId","useEffect","a","list","newList","reverse","map","isDeleted","push","columns","title","field","width","render","rowData","md","users","console","log","dataIndex","row","assignedUser","getLeadSource","closeModal","handleSubmitSource","preventDefault","newInput","lead","target","name","onAssignSubmit","keys","leadSourceId","Modal","open","handleClose","index","key","defaultChecked","isAssign","firstName","lastName","dataSource","rowKey","LeadSource","exact","from","to","path","component","ViewLeadSource"],"mappings":"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","file":"static/js/16.3afec22f.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');\n\nexports.default = _default;","import axios from 'axios';\r\n\r\nexport const ROOT_URL = process.env.REACT_APP_API_URL;\r\nexport const LEAD_SOURCE_URL = 'api/config/leadsource';\r\nexport const ASSIGN_LEAD_SOURCE_URL = 'api/config/leadsource/assign';\r\nexport const LEAD_SOURCE_USER_URL = 'api/config/leadsource/users';\r\n\r\nexport function getLeadSourceList() {\r\n  return axios.get(`${ROOT_URL}/${LEAD_SOURCE_URL}`);\r\n}\r\n\r\nexport function addLeadSource(data) {\r\n  return axios.post(`${ROOT_URL}/${LEAD_SOURCE_URL}`, data);\r\n}\r\n\r\nexport function updateLeadSource(data) {\r\n  return axios.patch(`${ROOT_URL}/${LEAD_SOURCE_URL}`, data);\r\n}\r\n\r\nexport function deleteLeadSource(id) {\r\n  return axios.delete(`${ROOT_URL}/${LEAD_SOURCE_URL}/${id}`);\r\n}\r\n\r\nexport function assignLeadSource(data) {\r\n  return axios.post(`${ROOT_URL}/${ASSIGN_LEAD_SOURCE_URL}`, data);\r\n}\r\n\r\nexport function getLeadSourceUsers(id) {\r\n  return axios.get(`${ROOT_URL}/${LEAD_SOURCE_USER_URL}/${id}`);\r\n}\r\n","import React, { useState } from 'react';\r\nimport {\r\n  TextField,\r\n  Button,\r\n  FormControlLabel,\r\n  Checkbox,\r\n} from '@material-ui/core';\r\nimport { Container, InputGroup, Row, Col } from 'react-bootstrap';\r\n\r\nconst LeadSourceInput = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Container>\r\n        <Row>\r\n          <Col xs={12}>\r\n            <InputGroup className='mb-4'>\r\n              <TextField\r\n                onChange={props.handleChange}\r\n                id='leadSourceName'\r\n                label='Source Name'\r\n                className=''\r\n                value={props.data.leadSourceName}\r\n                variant='outlined'\r\n                fullWidth={true}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                size='small'\r\n              />\r\n            </InputGroup>\r\n          </Col>\r\n          <Col xs={4}>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={props.data.active}\r\n                  onChange={props.handleChangeActive}\r\n                  id='active'\r\n                  color='primary'\r\n                />\r\n              }\r\n              label='Active'\r\n            />\r\n          </Col>\r\n          <Col xs={12}>\r\n            <InputGroup>\r\n              <Button\r\n                type='submit'\r\n                size='large'\r\n                className='float-right'\r\n                variant='contained'\r\n                color='primary'\r\n                onClick={(e) => {\r\n                  props.handleSubmit(e);\r\n                }}\r\n              >\r\n                Confirm\r\n              </Button>\r\n            </InputGroup>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default LeadSourceInput;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  getLeadSourceList,\r\n  addLeadSource,\r\n  updateLeadSource,\r\n  deleteLeadSource,\r\n  assignLeadSource,\r\n  getLeadSourceUsers,\r\n} from '../../../../services/leadSource.service';\r\nimport { getBusinessUsers } from '../../../../services/business.service';\r\nimport { Table, Checkbox } from 'antd';\r\nimport { Button } from '@material-ui/core';\r\nimport Modal from '../../../shared/Modal';\r\nimport LeadSourceInput from './LeadSourceInput';\r\nimport { connect } from 'react-redux';\r\n\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Row, Col } from 'react-bootstrap';\r\n\r\nconst ViewLeadSource = (props) => {\r\n  const [state, setState] = useState([]);\r\n  const initialInput = {\r\n    id: '',\r\n    leadSourceName: '',\r\n    active: true,\r\n  };\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isModalAssignOpen, setIsModalAssignOpen] = useState(false);\r\n  const [isUpdate, setIsUpdate] = useState(false);\r\n  const [input, setInput] = useState(initialInput);\r\n  const [reRender, setRerender] = useState(false); // Re render table after updating\r\n  const [businessUsers, setBusinessUsers] = useState([]);\r\n  const [assignedUsers, setAssignedUsers] = useState({});\r\n  const [assignLeadId, setAssignedLeadId] = useState('');\r\n\r\n  useEffect(() => {\r\n    const getLeadSource = async () => {\r\n      // const businessUsers = await getBusinessUsers(props.businessId);\r\n      // setBusinessUsers(businessUsers.data);\r\n      const list = await getLeadSourceList(props.businessId);\r\n      let newList = [];\r\n      list.data.reverse().map((data) => {\r\n        if (data.isDeleted) return;\r\n        newList.push(data);\r\n      });\r\n      setState({\r\n        columns: [\r\n          {\r\n            title: 'Action',\r\n            field: 'actions',\r\n            width: 300,\r\n            render: (rowData) => {\r\n              return (\r\n                <Row>\r\n                  <Col md={4}>\r\n                    <Button\r\n                      variant='contained'\r\n                      color='secondary'\r\n                      size='small'\r\n                      title={rowData.id}\r\n                      onClick={() => {\r\n                        setInput(rowData);\r\n                        setIsUpdate(true);\r\n                        setIsModalOpen(true);\r\n                      }}\r\n                    >\r\n                      <EditIcon />\r\n                    </Button>\r\n                  </Col>\r\n                  <Col md={4}>\r\n                    <Button\r\n                      variant='contained'\r\n                      size='small'\r\n                      className='btn-danger'\r\n                      onClick={async () => {\r\n                        await deleteLeadSource(rowData.id);\r\n                        setRerender(!reRender);\r\n                      }}\r\n                    >\r\n                      <DeleteIcon />\r\n                    </Button>\r\n                  </Col>\r\n                  <Col md={4}>\r\n                    <Button\r\n                      variant='contained'\r\n                      size='small'\r\n                      color='primary'\r\n                      onClick={async () => {\r\n                        const users = await getLeadSourceUsers(rowData.id);\r\n                        console.log(users.data);\r\n                        setBusinessUsers(users.data);\r\n                        setIsModalAssignOpen(true);\r\n                        setAssignedLeadId(rowData.id);\r\n                        setRerender(!reRender);\r\n                      }}\r\n                    >\r\n                      Assign\r\n                    </Button>\r\n                  </Col>\r\n                </Row>\r\n              );\r\n            },\r\n          },\r\n          { title: 'Source Name', dataIndex: 'leadSourceName' },\r\n          {\r\n            title: 'Is Active?',\r\n            render: (row) => (row.active ? 'true' : 'false'),\r\n          },\r\n          {\r\n            title: 'Assigned',\r\n            render: (row) => `${row.assignedUser}`,\r\n          },\r\n        ],\r\n        data: newList,\r\n      });\r\n    };\r\n    getLeadSource();\r\n  }, [reRender]);\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n    setIsModalAssignOpen(false);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setInput({\r\n      ...input,\r\n      [e.target.id]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const handleChangeActive = (e) => {\r\n    setInput({\r\n      ...input,\r\n      active: !input.active,\r\n    });\r\n  };\r\n\r\n  const handleSubmitSource = async (e) => {\r\n    e.preventDefault();\r\n    const newInput = { ...input, businessId: props.businessId };\r\n    if (isUpdate) {\r\n      try {\r\n        const lead = await updateLeadSource(newInput);\r\n        console.log(lead);\r\n        //const usertype = await updateUserType(newInput);\r\n        //notify({ success: true, message: 'Success updating user type.' });\r\n      } catch (error) {}\r\n    }\r\n    if (!isUpdate) {\r\n      try {\r\n        await addLeadSource(newInput);\r\n        //const usertype = await addUserType(newInput);\r\n        //notify({ success: true, message: 'Success adding user types.' });\r\n      } catch (error) {}\r\n    }\r\n    setIsModalOpen(false);\r\n    setRerender(!reRender);\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    setAssignedUsers({\r\n      ...assignedUsers,\r\n      [e.target.name]: e.target.checked,\r\n    });\r\n  };\r\n\r\n  const onAssignSubmit = async (e) => {\r\n    let users = [];\r\n    Object.keys(assignedUsers).map((userId) => {\r\n      //if (assignedUsers[userId] === false) return;\r\n      users.push({ leadSourceId: assignLeadId, userId: userId });\r\n    });\r\n    const lead = assignLeadSource(users);\r\n    setRerender(!reRender);\r\n    setIsModalAssignOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        type='leadsource'\r\n        title='Lead Source'\r\n        open={isModalOpen}\r\n        handleClose={closeModal}\r\n      >\r\n        <LeadSourceInput\r\n          data={input}\r\n          handleChange={handleChange}\r\n          handleSubmit={handleSubmitSource}\r\n          handleChangeActive={handleChangeActive}\r\n        />\r\n      </Modal>\r\n      <Modal\r\n        type='assign'\r\n        title='Assign'\r\n        open={isModalAssignOpen}\r\n        handleClose={closeModal}\r\n      >\r\n        {businessUsers?.map((users, index) => {\r\n          return (\r\n            <div key={index}>\r\n              <Checkbox\r\n                name={users.id}\r\n                onChange={onChange}\r\n                defaultChecked={users.isAssign}\r\n              >\r\n                {users.firstName} {users.lastName}\r\n              </Checkbox>\r\n              <br />\r\n            </div>\r\n          );\r\n        })}\r\n        <br />\r\n        <Button variant='contained' color='secondary' onClick={onAssignSubmit}>\r\n          Confirm\r\n        </Button>\r\n      </Modal>\r\n      <Table\r\n        columns={state.columns}\r\n        dataSource={state.data}\r\n        rowKey={(row) => row.id}\r\n        title={() => (\r\n          <>\r\n            <Button\r\n              className='mb-2'\r\n              variant='contained'\r\n              color='secondary'\r\n              size='large'\r\n              onClick={() => {\r\n                setIsModalOpen(true);\r\n                // setIsUpdate(false);\r\n                // setInput(initialInput);\r\n              }}\r\n            >\r\n              Add\r\n            </Button>\r\n            {/* <Button className='float-right' onClick={refreshTable}>\r\n            Refresh\r\n          </Button> */}\r\n          </>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    businessId: state.auth.user.mainRole.id,\r\n    userId: state.auth.user.id,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ViewLeadSource);\r\n","import React from 'react';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport ViewLeadSource from './components/ViewLeadSource';\r\n\r\nexport default function LeadSource() {\r\n  return (\r\n    <Switch>\r\n      <Redirect exact={true} from='/' to='/lead-source' />\r\n      <Route path='/lead-source' component={ViewLeadSource} />\r\n    </Switch>\r\n  );\r\n}\r\n"],"sourceRoot":""}