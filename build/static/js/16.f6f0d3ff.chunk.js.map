{"version":3,"sources":["../node_modules/@material-ui/icons/Edit.js","app/services/leadSource.service.js","app/pages/home/lead-source/components/LeadSourceInput.js","app/pages/home/lead-source/components/ViewLeadSource.js","app/pages/home/lead-source/LeadSource.js"],"names":["_interopRequireDefault","Object","defineProperty","exports","value","default","_react","_default","createElement","d","ROOT_URL","process","getLeadSourceList","id","axios","get","addLeadSource","data","post","updateLeadSource","patch","deleteLeadSource","delete","LeadSourceInput","props","onSubmit","handleSubmit","Container","Row","Col","xs","InputGroup","className","TextField","onChange","handleChange","label","leadSourceName","variant","fullWidth","InputLabelProps","shrink","size","FormControlLabel","control","Checkbox","checked","active","handleChangeActive","color","Button","type","onClick","e","connect","state","businessId","auth","user","mainRole","business","userId","useState","setState","isModalOpen","setIsModalOpen","isModalAssignOpen","setIsModalAssignOpen","isUpdate","setIsUpdate","input","setInput","reRender","setRerender","businessUsers","assignedUsers","setAssignedUsers","assignLeadId","useEffect","a","list","newList","reverse","map","isDeleted","push","columns","title","field","width","render","rowData","md","dataIndex","row","getLeadSource","closeModal","handleSubmitSource","preventDefault","newInput","target","name","onAssignSubmit","users","console","log","keys","u","leadSourceId","isAssigned","Modal","open","handleClose","index","key","defaultChecked","isAssign","firstName","lastName","dataSource","rowKey","LeadSource","exact","from","to","path","component","ViewLeadSource"],"mappings":"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","file":"static/js/16.f6f0d3ff.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');\n\nexports.default = _default;","import axios from 'axios';\r\n\r\nexport const ROOT_URL = process.env.REACT_APP_API_URL;\r\nexport const LEAD_SOURCE_URL = 'api/config/leadsource';\r\nexport const ASSIGN_LEAD_SOURCE_URL = 'api/Lead/AssignUserToLeadSource'; //'api/config/leadsource/assign';\r\nexport const LEAD_SOURCE_USER_URL = 'api/config/leadsource/users';\r\n\r\n// new api\r\nexport const GET_LEAD_SOURCE_USERS = 'api/Lead/GetAllLeadUsersByLeadSourceIdAndBusinessKey';\r\n\r\nexport function getLeadSourceList(id) {\r\n  return axios.get(`${ROOT_URL}/${LEAD_SOURCE_URL}/${id}`);\r\n}\r\n\r\nexport function addLeadSource(data) {\r\n  return axios.post(`${ROOT_URL}/${LEAD_SOURCE_URL}`, data);\r\n}\r\n\r\nexport function updateLeadSource(data) {\r\n  return axios.patch(`${ROOT_URL}/${LEAD_SOURCE_URL}`, data);\r\n}\r\n\r\nexport function deleteLeadSource(id) {\r\n  return axios.delete(`${ROOT_URL}/${LEAD_SOURCE_URL}/${id}`);\r\n}\r\n\r\nexport function assignLeadSource(id, data) {\r\n  return axios.post(`${ROOT_URL}/${ASSIGN_LEAD_SOURCE_URL}?LeadSourceId=${id}`, data);\r\n}\r\n\r\nexport function getLeadSourceUsers(id, bId) {\r\n  return axios.get(`${ROOT_URL}/${GET_LEAD_SOURCE_USERS}?LeadSourceId=${id}&businessId=${bId}`);\r\n}\r\n","import React from 'react';\r\nimport {\r\n  TextField,\r\n  Button,\r\n  FormControlLabel,\r\n  Checkbox\r\n} from '@material-ui/core';\r\nimport { Container, InputGroup, Row, Col } from 'react-bootstrap';\r\n\r\nconst LeadSourceInput = props => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Container>\r\n        <Row>\r\n          <Col xs={12}>\r\n            <InputGroup className='mb-4'>\r\n              <TextField\r\n                onChange={props.handleChange}\r\n                id='leadSourceName'\r\n                label='Source Name'\r\n                className=''\r\n                value={props.data.leadSourceName}\r\n                variant='outlined'\r\n                fullWidth={true}\r\n                InputLabelProps={{\r\n                  shrink: true\r\n                }}\r\n                size='small'\r\n              />\r\n            </InputGroup>\r\n          </Col>\r\n          <Col xs={4}>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={props.data.active}\r\n                  onChange={props.handleChangeActive}\r\n                  id='active'\r\n                  color='primary'\r\n                />\r\n              }\r\n              label='Active'\r\n            />\r\n          </Col>\r\n          <Col xs={12}>\r\n            <InputGroup>\r\n              <Button\r\n                type='submit'\r\n                size='large'\r\n                className='float-right'\r\n                variant='contained'\r\n                color='primary'\r\n                onClick={e => {\r\n                  props.handleSubmit(e);\r\n                }}\r\n              >\r\n                Confirm\r\n              </Button>\r\n            </InputGroup>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default LeadSourceInput;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  getLeadSourceList,\r\n  addLeadSource,\r\n  updateLeadSource,\r\n  deleteLeadSource,\r\n  assignLeadSource,\r\n  getLeadSourceUsers\r\n} from '../../../../services/leadSource.service';\r\n// import { getBusinessUsers } from '../../../../services/business.service';\r\nimport { Table, Checkbox } from 'antd';\r\nimport { Button } from '@material-ui/core';\r\nimport Modal from '../../../shared/Modal';\r\nimport LeadSourceInput from './LeadSourceInput';\r\nimport { connect } from 'react-redux';\r\n\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Row, Col } from 'react-bootstrap';\r\n\r\nconst ViewLeadSource = props => {\r\n  const [state, setState] = useState([]);\r\n  const initialInput = {\r\n    id: '',\r\n    leadSourceName: '',\r\n    active: true\r\n  };\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isModalAssignOpen, setIsModalAssignOpen] = useState(false);\r\n  const [isUpdate, setIsUpdate] = useState(false);\r\n  const [input, setInput] = useState(initialInput);\r\n  const [reRender, setRerender] = useState(false); // Re render table after updating\r\n  const [businessUsers, setBusinessUsers] = useState([]);\r\n  const [assignedUsers, setAssignedUsers] = useState({});\r\n  const [assignLeadId, setAssignedLeadId] = useState('');\r\n\r\n  useEffect(() => {\r\n    const getLeadSource = async () => {\r\n      // const businessUsers = await getBusinessUsers(props.businessId);\r\n      // setBusinessUsers(businessUsers.data);\r\n      const list = await getLeadSourceList(props.businessId);\r\n      //console.log(list);\r\n      let newList = [];\r\n      list.data.reverse().map(data => {\r\n        if (data.isDeleted) return;\r\n        return newList.push(data);\r\n      });\r\n      setState({\r\n        columns: [\r\n          {\r\n            title: 'Action',\r\n            field: 'actions',\r\n            width: 300,\r\n            render: rowData => {\r\n              return (\r\n                <Row>\r\n                  <Col md={4}>\r\n                    <Button\r\n                      variant='contained'\r\n                      color='secondary'\r\n                      size='small'\r\n                      title={rowData.id}\r\n                      onClick={() => {\r\n                        setInput(rowData);\r\n                        setIsUpdate(true);\r\n                        setIsModalOpen(true);\r\n                      }}>\r\n                      <EditIcon />\r\n                    </Button>\r\n                  </Col>\r\n                  <Col md={4}>\r\n                    <Button\r\n                      variant='contained'\r\n                      size='small'\r\n                      className='btn-danger'\r\n                      onClick={async () => {\r\n                        await deleteLeadSource(rowData.id);\r\n                        setRerender(!reRender);\r\n                      }}>\r\n                      <DeleteIcon />\r\n                    </Button>\r\n                  </Col>\r\n                  {/* <Col md={4}>\r\n                    <Button\r\n                      variant='contained'\r\n                      size='small'\r\n                      color='primary'\r\n                      onClick={async () => {\r\n                        const users = await getLeadSourceUsers(rowData.id, props.businessId);\r\n                        console.log(users);\r\n                        setBusinessUsers(users.data);\r\n\r\n                        let user = {};\r\n\r\n                        users.data.map(u => {\r\n                          if (!u.isAssign) return;\r\n                          return (user = {\r\n                            ...user,\r\n                            [u.id]: true\r\n                          });\r\n                        });\r\n\r\n                        setAssignedUsers(user);\r\n                        console.log(user);\r\n\r\n                        setIsModalAssignOpen(true);\r\n                        setAssignedLeadId(rowData.id);\r\n                        setRerender(!reRender);\r\n                      }}>\r\n                      Assign\r\n                    </Button>\r\n                  </Col> */}\r\n                </Row>\r\n              );\r\n            }\r\n          },\r\n          { title: 'Source Name', dataIndex: 'leadSourceName' },\r\n          {\r\n            title: 'Is Active?',\r\n            render: row => (row.active ? 'true' : 'false')\r\n          }\r\n          // {\r\n          //   title: 'Assigned',\r\n          //   render: row => `${row.assignedUser}`\r\n          // }\r\n        ],\r\n        data: newList\r\n      });\r\n    };\r\n    getLeadSource();\r\n  }, [reRender]);\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n    setIsModalAssignOpen(false);\r\n  };\r\n\r\n  const handleChange = e => {\r\n    setInput({\r\n      ...input,\r\n      [e.target.id]: e.target.value\r\n    });\r\n  };\r\n\r\n  const handleChangeActive = e => {\r\n    setInput({\r\n      ...input,\r\n      active: !input.active\r\n    });\r\n  };\r\n\r\n  const handleSubmitSource = async e => {\r\n    e.preventDefault();\r\n    const newInput = { ...input, businessId: props.businessId };\r\n    if (isUpdate) {\r\n      try {\r\n        await updateLeadSource(newInput);\r\n        //console.log(lead);\r\n        //const usertype = await updateUserType(newInput);\r\n        //notify({ success: true, message: 'Success updating user type.' });\r\n      } catch (error) {}\r\n    }\r\n    if (!isUpdate) {\r\n      try {\r\n        await addLeadSource(newInput);\r\n        //console.log(lead);\r\n        //const usertype = await addUserType(newInput);\r\n        //notify({ success: true, message: 'Success adding user types.' });\r\n      } catch (error) {}\r\n    }\r\n    setIsModalOpen(false);\r\n    setRerender(!reRender);\r\n  };\r\n\r\n  const onChange = e => {\r\n    // console.log(assignedUsers);\r\n    // console.log(e.target.name);\r\n    // console.log(assignedUsers);\r\n    if (!e.target.checked) {\r\n      delete assignedUsers[e.target.name];\r\n    } else {\r\n      setAssignedUsers({\r\n        ...assignedUsers,\r\n        [e.target.name]: e.target.checked\r\n      });\r\n    }\r\n    // console.log(assignedUsers);\r\n  };\r\n\r\n  const onAssignSubmit = async e => {\r\n    let users = [];\r\n\r\n    console.log(assignedUsers);\r\n\r\n    Object.keys(assignedUsers).map(u => {\r\n      if (!assignedUsers[u]) return;\r\n      users.push({ leadSourceId: assignLeadId, userId: u, isAssigned: true });\r\n    });\r\n\r\n    console.log(users);\r\n\r\n    //const lead = await assignLeadSource(assignLeadId, users);\r\n    //console.log(lead);\r\n\r\n    setRerender(!reRender);\r\n    setIsModalAssignOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal type='leadsource' title='Lead Source' open={isModalOpen} handleClose={closeModal}>\r\n        <LeadSourceInput\r\n          data={input}\r\n          handleChange={handleChange}\r\n          handleSubmit={handleSubmitSource}\r\n          handleChangeActive={handleChangeActive}\r\n        />\r\n      </Modal>\r\n      <Modal type='assign' title='Assign' open={isModalAssignOpen} handleClose={closeModal}>\r\n        {businessUsers?.map((users, index) => {\r\n          return (\r\n            <div key={index}>\r\n              <Checkbox name={users.id} onChange={onChange} defaultChecked={users.isAssign}>\r\n                {users.firstName} {users.lastName}\r\n              </Checkbox>\r\n              <br />\r\n            </div>\r\n          );\r\n        })}\r\n        <Button variant='contained' color='secondary' onClick={onAssignSubmit}>\r\n          Confirm\r\n        </Button>\r\n      </Modal>\r\n      <Table\r\n        columns={state.columns}\r\n        dataSource={state.data}\r\n        rowKey={row => row.id}\r\n        title={() => (\r\n          <>\r\n            <Button\r\n              className='mb-2'\r\n              variant='contained'\r\n              color='secondary'\r\n              size='large'\r\n              onClick={() => {\r\n                setIsModalOpen(true);\r\n                // setIsUpdate(false);\r\n                // setInput(initialInput);\r\n              }}>\r\n              Add\r\n            </Button>\r\n            {/* <Button className='float-right' onClick={refreshTable}>\r\n            Refresh\r\n          </Button> */}\r\n          </>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    businessId: state.auth.user.mainRole.business.id,\r\n    userId: state.auth.user.id\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ViewLeadSource);\r\n","import React from 'react';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport ViewLeadSource from './components/ViewLeadSource';\r\n\r\nexport default function LeadSource() {\r\n  return (\r\n    <Switch>\r\n      <Redirect exact={true} from='/' to='/lead-source' />\r\n      <Route path='/lead-source' component={ViewLeadSource} />\r\n    </Switch>\r\n  );\r\n}\r\n"],"sourceRoot":""}