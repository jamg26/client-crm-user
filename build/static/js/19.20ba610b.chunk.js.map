{"version":3,"sources":["app/pages/home/Modal.js","app/pages/home/usertypes/components/UserTypesInput.js","app/pages/home/usertypes/components/viewUserTypes.js","app/pages/home/usertypes/UserTypes.js"],"names":["ModalTable","props","size","dialogClassName","show","open","onHide","handleClose","centered","Header","closeButton","Title","title","Body","children","UserTypesInput","onSubmit","handleSubmit","Container","Row","Col","xs","InputGroup","className","TextField","onChange","handleChange","id","label","value","data","businessUserRoleName","variant","InputLabelProps","shrink","fullWidth","required","FormControlLabel","control","Checkbox","checked","active","handleChangeActive","color","Button","type","notify","success","toast","message","error","connect","state","businessId","auth","user","mainRole","business","useState","setState","reRender","setRerender","initialInput","name","isModalOpen","setIsModalOpen","isUpdate","setIsUpdate","input","setInput","getBusinessId","a","getBusiness","useEffect","getUserTypeList","usertypes","columns","field","width","render","rowData","canBeDeleted","onClick","deleteType","role","length","getData","handleSubmitTypes","e","preventDefault","newInput","updateUserType","addUserType","refreshTable","deleteUserType","target","handleChangeUserType","userType","dataSource","bordered","showHeader","loading","Accounts","exact","from","to","path","component","viewUserTypes"],"mappings":"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","file":"static/js/19.20ba610b.chunk.js","sourcesContent":["import React from 'react';\r\n// import { makeStyles } from '@material-ui/core/styles';\r\nimport { Modal } from 'react-bootstrap';\r\n\r\nconst ModalTable = props => {\r\n  return (\r\n    <div>\r\n      <Modal\r\n        size='lg'\r\n        dialogClassName='modal-90w'\r\n        show={props.open}\r\n        onHide={props.handleClose}\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{props.title}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>{props.children}</Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModalTable;\r\n","import React from 'react';\r\nimport {\r\n  TextField,\r\n  Button,\r\n  FormControlLabel,\r\n  // Radio,\r\n  // RadioGroup,\r\n  // FormControl,\r\n  // FormLabel,\r\n  Checkbox\r\n} from '@material-ui/core';\r\nimport { Container, InputGroup, Row, Col } from 'react-bootstrap';\r\n\r\nconst UserTypesInput = props => {\r\n  //const { userType } = props.data;\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Container>\r\n        <Row>\r\n          <Col xs={12}>\r\n            <InputGroup className='mb-4'>\r\n              <TextField\r\n                onChange={props.handleChange}\r\n                id='businessUserRoleName'\r\n                label='Name'\r\n                className=''\r\n                value={props.data.businessUserRoleName}\r\n                variant='outlined'\r\n                InputLabelProps={{\r\n                  shrink: true\r\n                }}\r\n                size='small'\r\n                fullWidth={true}\r\n                required\r\n              />\r\n            </InputGroup>\r\n          </Col>\r\n          {/* <Col xs={12}>\r\n            <FormControl component='fieldset'>\r\n              <FormLabel component='legend'>User Type</FormLabel>\r\n              <RadioGroup\r\n                row\r\n                name='position'\r\n                defaultValue={userType || ''}\r\n                onChange={props.handleChangeUserType}\r\n              >\r\n                <FormControlLabel\r\n                  value='Business Owner'\r\n                  control={<Radio color='primary' />}\r\n                  label='Business Owner'\r\n                />\r\n                <FormControlLabel\r\n                  value='Admin'\r\n                  control={<Radio color='primary' />}\r\n                  label='Admin'\r\n                />\r\n                <FormControlLabel\r\n                  value='Agent'\r\n                  control={<Radio color='primary' />}\r\n                  label='Agent'\r\n                />\r\n                <FormControlLabel\r\n                  value='Affiliate'\r\n                  control={<Radio color='primary' />}\r\n                  label='Affiliate'\r\n                />\r\n              </RadioGroup>\r\n            </FormControl>\r\n          </Col> */}\r\n          <Col xs={12}>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={props.data.active}\r\n                  onChange={props.handleChangeActive}\r\n                  id='active'\r\n                  color='primary'\r\n                />\r\n              }\r\n              label='Active'\r\n            />\r\n          </Col>\r\n          <Col xs={12}>\r\n            <InputGroup>\r\n              <Button\r\n                type='submit'\r\n                size='large'\r\n                className='float-right'\r\n                variant='contained'\r\n                color='primary'\r\n              >\r\n                Confirm\r\n              </Button>\r\n            </InputGroup>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default UserTypesInput;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  getUserTypeList,\r\n  addUserType,\r\n  updateUserType,\r\n  deleteUserType\r\n} from '../../../../services/userType.service';\r\nimport { getBusiness } from '../../../../services/business.service';\r\nimport { Table } from 'antd';\r\nimport { Button } from '@material-ui/core';\r\n// import EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport TableModal from '../../Modal';\r\nimport UserTypesInput from './UserTypesInput';\r\n\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nconst notify = data => {\r\n  if (data.success) {\r\n    toast.success(data.message);\r\n  } else {\r\n    toast.error(data.message);\r\n  }\r\n};\r\n\r\nconst ViewUserType = props => {\r\n  const [state, setState] = useState({});\r\n  const [reRender, setRerender] = useState(false); // Re render table after updating\r\n\r\n  const initialInput = {\r\n    id: '',\r\n    name: '',\r\n    businessUserRoleName: '',\r\n    active: true\r\n  };\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isUpdate, setIsUpdate] = useState(false);\r\n  const [input, setInput] = useState(initialInput);\r\n\r\n  const getBusinessId = async () => {\r\n    const business = await getBusiness();\r\n    const { id } = business.data;\r\n    return id;\r\n  };\r\n\r\n  useEffect(() => {\r\n    setState({});\r\n    const getData = async () => {\r\n      const id = await getBusinessId();\r\n      const usertypes = await getUserTypeList(id);\r\n      setState({\r\n        columns: [\r\n          {\r\n            title: 'Action',\r\n            field: 'actions',\r\n            width: 200,\r\n            render: rowData => {\r\n              return (\r\n                <Row>\r\n                  {/* <Col>\r\n                    <Button\r\n                      variant='contained'\r\n                      color='secondary'\r\n                      size='small'\r\n                      title={rowData.id}\r\n                      onClick={() => {\r\n                        setInput(rowData);\r\n                        setIsUpdate(true);\r\n                        setIsModalOpen(true);\r\n                      }}\r\n                    >\r\n                      <EditIcon />\r\n                    </Button>\r\n                  </Col> */}\r\n                  {rowData.canBeDeleted ? (\r\n                    <Col>\r\n                      <Button\r\n                        variant='contained'\r\n                        size='small'\r\n                        onClick={() => {\r\n                          deleteType(rowData.id);\r\n                        }}\r\n                      >\r\n                        <DeleteIcon />\r\n                      </Button>\r\n                    </Col>\r\n                  ) : null}\r\n                </Row>\r\n              );\r\n            }\r\n          },\r\n          {\r\n            title: 'Name',\r\n            field: 'businessUserRoleName',\r\n            render: role => role.businessUserRoleName\r\n          },\r\n          { title: 'Include Users', render: data => usertypes.data.length },\r\n          {\r\n            title: 'Active',\r\n            field: 'active',\r\n            render: active => (active.active ? 'true' : 'false')\r\n          }\r\n        ],\r\n        data: usertypes.data\r\n      });\r\n    };\r\n    getData();\r\n  }, [reRender]);\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  const handleChange = e => {\r\n    setInput({\r\n      ...input,\r\n      [e.target.id]: e.target.value\r\n    });\r\n  };\r\n\r\n  const handleChangeUserType = e => {\r\n    setInput({\r\n      ...input,\r\n      userType: e.target.value\r\n    });\r\n  };\r\n\r\n  const handleChangeActive = e => {\r\n    setInput({\r\n      ...input,\r\n      active: !input.active\r\n    });\r\n  };\r\n\r\n  const handleSubmitTypes = async e => {\r\n    e.preventDefault();\r\n    const newInput = { ...input, businessId: props.businessId };\r\n    if (isUpdate) {\r\n      try {\r\n        await updateUserType(newInput);\r\n        notify({ success: true, message: 'Success updating user type.' });\r\n      } catch (error) {}\r\n    }\r\n    if (!isUpdate) {\r\n      try {\r\n        await addUserType(newInput);\r\n        notify({ success: true, message: 'Success adding user types.' });\r\n      } catch (error) {}\r\n    }\r\n    setIsModalOpen(false);\r\n    setRerender(!reRender);\r\n  };\r\n\r\n  const refreshTable = () => setRerender(!reRender);\r\n\r\n  const deleteType = async id => {\r\n    await deleteUserType(id);\r\n    setRerender(!reRender);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TableModal\r\n        type='usertypes'\r\n        title='User Types'\r\n        open={isModalOpen}\r\n        handleClose={closeModal}\r\n      >\r\n        <UserTypesInput\r\n          data={input}\r\n          handleChange={handleChange}\r\n          handleSubmit={handleSubmitTypes}\r\n          handleChangeUserType={handleChangeUserType}\r\n          handleChangeActive={handleChangeActive}\r\n        />\r\n      </TableModal>\r\n      <Table\r\n        columns={state.columns}\r\n        dataSource={state.data}\r\n        title={() => (\r\n          <>\r\n            <Button\r\n              className='mb-2'\r\n              variant='contained'\r\n              color='secondary'\r\n              size='large'\r\n              onClick={() => {\r\n                setIsModalOpen(true);\r\n                setIsUpdate(false);\r\n                setInput(initialInput);\r\n              }}\r\n            >\r\n              Add\r\n            </Button>\r\n            <Button className='float-right' onClick={refreshTable}>\r\n              Refresh\r\n            </Button>\r\n          </>\r\n        )}\r\n        bordered\r\n        size='small'\r\n        showHeader\r\n        loading={!state.data ? true : false}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    businessId: state.auth.user.mainRole.business.id\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ViewUserType);\r\n","import React from 'react';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport viewUserTypes from './components/viewUserTypes';\r\nexport default function Accounts() {\r\n  return (\r\n    <Switch>\r\n      <Redirect exact={true} from='/' to='/usertypes' />\r\n      <Route path='/usertypes' component={viewUserTypes} />\r\n    </Switch>\r\n  );\r\n}\r\n"],"sourceRoot":""}